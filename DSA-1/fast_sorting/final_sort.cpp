/*

Yair Andrew Gross
DSA1 - Programming Project #2
12/19/2019

The first part of this program was provided with the assignment details with
instructions not to change any code above a certain point.

The lower part of the code is a an original sorting algorithm designed
specifically to efficiently handle the files described in the assignment.

Choice of sorting strategy and implementation was left entirely open.
The algorithm below takes advantage of the finite list of names from which
the data was generated, mapping each name to its place in the alphabetical
order using a few simple operations and a "translation" map to convert the
output values to the correct indices.

It essentially amounts to a rudimentary hash function/table, though I didn't
know that at the time since the course had not covered it yet.

*/


// THIS IS THE PROVIDED CODE FOR PROGRAM #2, DSA 1, FALL 2019

#include <iostream>
#include <fstream>
#include <sstream>
#include <list>
#include <vector>
#include <string>
#include <algorithm>
#include <ctime>
#include <cmath>
#include <cstring>
#include <cctype>
#include <cstdlib>

using namespace std;

// A simple class; each object holds four public fields
class Data {
public:
  string lastName;
  string firstName;
  string ssn;
};

// Load the data from a specified input file
void loadDataList(list<Data *> &l, const string &filename) {

  ifstream input(filename);
  if (!input) {
    cerr << "Error: could not open " << filename << "\n";
    exit(1);
  }

  // The first line indicates the size
  string line;
  getline(input, line);
  stringstream ss(line);
  int size;
  ss >> size;

  // Load the data
  for (int i = 0; i < size; i++) {
    getline(input, line);
    stringstream ss2(line);
    Data *pData = new Data();
    ss2 >> pData->lastName >> pData->firstName >> pData->ssn;
    l.push_back(pData);
  }

  input.close();
}

// Output the data to a specified output file
void writeDataList(const list<Data *> &l, const string &filename) {

  ofstream output(filename);
  if (!output) {
    cerr << "Error: could not open " << filename << "\n";
    exit(1);
  }

  // Write the size first
  int size = l.size();
  output << size << "\n";

  // Write the data
  for (auto pData:l) {
    output << pData->lastName << " "
           << pData->firstName << " "
           << pData->ssn << "\n";
  }

  output.close();
}

// Sort the data according to a specified field
// (Implementation of this function will be later in this file)
void sortDataList(list<Data *> &);

// The main function calls routines to get the data, sort the data,
// and output the data. The sort is timed according to CPU time.
int main() {
  string filename;
  cout << "Enter name of input file: ";
  cin >> filename;
  list<Data *> theList;
  loadDataList(theList, filename);

  cout << "Data loaded.\n";

  cout << "Executing sort...\n";
  clock_t t1 = clock();
  sortDataList(theList);
  clock_t t2 = clock();
  double timeDiff = ((double) (t2 - t1)) / CLOCKS_PER_SEC;

  cout << "Sort finished. CPU time was " << timeDiff << " seconds.\n";

  cout << "Enter name of output file: ";
  cin >> filename;
  writeDataList(theList, filename);

  return 0;
}

// -------------------------------------------------
// YOU MAY NOT CHANGE OR ADD ANY CODE ABOVE HERE !!!
// -------------------------------------------------

/*
Yair Andrew Gross
Programming Assignment #2
12/10/2019
*/

// You may add global variables, functions, and/or
// class defintions here if you wish.
#include <map>

bool ssnCompare1(Data *A, Data *B) {
  return (A->ssn) < (B->ssn);
}




// ---------------- T1/T2 section -------------------
int lastNameIndeces[100000]; // (*!*) Assign translation indeces
map<int, int> lastNameTranslator = {
  {19130, 0},
  {32879, 1},
  {19919, 2},
  {76665, 3},
  {93442, 4},
  {58201, 5},
  {14621, 6},
  {90175, 7},
  {88157, 8},
  {81162, 9},
  {84010, 10},
  {32620, 11},
  {26599, 12},
  {8814, 13},
  {44273, 14},
  {7171, 15},
  {39302, 16},
  {56438, 17},
  {63330, 18},
  {71550, 19},
  {39213, 20},
  {85149, 21},
  {80002, 22},
  {64841, 23},
  {69265, 24},
  {26099, 25},
  {1659, 26},
  {33557, 27},
  {49183, 28},
  {9038, 29},
  {31154, 30},
  {68882, 31},
  {88227, 32},
  {36497, 33},
  {20364, 34},
  {52590, 35},
  {35761, 36},
  {61162, 37},
  {71209, 38},
  {12558, 39},
  {72808, 40},
  {47784, 41},
  {37465, 42},
  {76346, 43},
  {28202, 44},
  {58632, 45},
  {32937, 46},
  {9348, 47},
  {80578, 48},
  {99742, 49},
  {8120, 50},
  {9828, 51},
  {10678, 52},
  {50082, 53},
  {63826, 54},
  {33228, 55},
  {7886, 56},
  {37626, 57},
  {75674, 58},
  {28496, 59},
  {11495, 60},
  {39584, 61},
  {58922, 62},
  {72431, 63},
  {84546, 64},
  {63810, 65},
  {53944, 66},
  {67770, 67},
  {2742, 68},
  {7260, 69},
  {31160, 70},
  {80111, 71},
  {22478, 72},
  {86702, 73},
  {30701, 74},
  {20446, 75},
  {6930, 76},
  {6702, 77},
  {74748, 78},
  {20106, 79},
  {24270, 80},
  {57583, 81},
  {924, 82},
  {59743, 83},
  {23594, 84},
  {63, 85},
  {82673, 86},
  {95, 87},
  {45027, 88},
  {39412, 89},
  {643, 90},
  {4976, 91},
  {45028, 92},
  {8275, 93},
  {5159, 94},
  {64542, 95},
  {10055, 96},
  {24585, 97},
  {4014, 98},
  {91813, 99},
  {15468, 100},
  {4184, 101},
  {27093, 102},
  {50742, 103},
  {3068, 104},
  {48384, 105},
  {37463, 106},
  {29141, 107},
  {90042, 108},
  {72388, 109},
  {21392, 110},
  {32015, 111},
  {6357, 112},
  {90257, 113},
  {64017, 114},
  {1469, 115},
  {4212, 116},
  {49986, 117},
  {64335, 118},
  {95171, 119},
  {2127, 120},
  {79716, 121},
  {2147, 122},
  {8284, 123},
  {6154, 124},
  {85411, 125},
  {4179, 126},
  {152, 127},
  {20179, 128},
  {12351, 129},
  {76334, 130},
  {98904, 131},
  {20650, 132},
  {94626, 133},
  {31568, 134},
  {11673, 135},
  {1472, 136},
  {81117, 137},
  {63010, 138},
  {646, 139},
  {17143, 140},
  {29050, 141},
  {55374, 142},
  {54802, 143},
  {79286, 144},
  {63011, 145},
  {76125, 146},
  {3725, 147},
  {74197, 148},
  {7309, 149},
  {7406, 150},
  {71045, 151},
  {79724, 152},
  {65290, 153},
  {44845, 154},
  {7767, 155},
  {15949, 156},
  {54471, 157},
  {242, 158},
  {17130, 159},
  {7081, 160},
  {13850, 161},
  {36470, 162},
  {2668, 163},
  {14204, 164},
  {81122, 165},
  {11324, 166},
  {94235, 167},
  {21680, 168},
  {1984, 169},
  {29575, 170},
  {9011, 171},
  {71469, 172},
  {10674, 173},
  {8446, 174},
  {23513, 175},
  {68103, 176},
  {4954, 177},
  {61233, 178},
  {84913, 179},
  {73113, 180},
  {72238, 181},
  {47005, 182},
  {30077, 183},
  {53005, 184},
  {16859, 185},
  {79659, 186},
  {21881, 187},
  {68793, 188},
  {69586, 189},
  {55223, 190},
  {21001, 191},
  {10348, 192},
  {83639, 193},
  {88628, 194},
  {969, 195},
  {67964, 196},
  {26214, 197},
  {11552, 198},
  {2980, 199},
  {77196, 200},
  {13343, 201},
  {93423, 202},
  {69747, 203},
  {301, 204},
  {21846, 205},
  {93824, 206},
  {73270, 207},
  {62091, 208},
  {39205, 209},
  {496, 210},
  {76698, 211},
  {76022, 212},
  {66970, 213},
  {98973, 214},
  {38420, 215},
  {43856, 216},
  {8471, 217},
  {6411, 218},
  {5494, 219},
  {13791, 220},
  {35775, 221},
  {64883, 222},
  {58067, 223},
  {37972, 224},
  {51855, 225},
  {99866, 226},
  {50988, 227},
  {57273, 228},
  {16923, 229},
  {10704, 230},
  {14691, 231},
  {98000, 232},
  {49679, 233},
  {80064, 234},
  {19706, 235},
  {22933, 236},
  {13290, 237},
  {47332, 238},
  {23392, 239},
  {81, 240},
  {750, 241},
  {56957, 242},
  {92156, 243},
  {5317, 244},
  {82365, 245},
  {96400, 246},
  {28211, 247},
  {59547, 248},
  {75441, 249},
  {137, 250},
  {1051, 251},
  {11430, 252},
  {11128, 253},
  {27978, 254},
  {37, 255},
  {83, 256},
  {21712, 257},
  {412, 258},
  {45994, 259},
  {553, 260},
  {19613, 261},
  {4731, 262},
  {6665, 263},
  {75394, 264},
  {7697, 265},
  {86805, 266},
  {40446, 267},
  {78858, 268},
  {70092, 269},
  {73078, 270},
  {91829, 271},
  {46179, 272},
  {11672, 273},
  {76269, 274},
  {70908, 275},
  {39026, 276},
  {60906, 277},
  {65951, 278},
  {90865, 279},
  {3267, 280},
  {91294, 281},
  {55662, 282},
  {18030, 283},
  {96698, 284},
  {8484, 285},
  {21812, 286},
  {14620, 287},
  {50382, 288},
  {25198, 289},
  {91333, 290},
  {93320, 291},
  {2568, 292},
  {32925, 293},
  {54915, 294},
  {5426, 295},
  {88135, 296},
  {45139, 297},
  {79439, 298},
  {4205, 299},
  {69008, 300},
  {2820, 301},
  {52054, 302},
  {94850, 303},
  {10461, 304},
  {55509, 305},
  {73462, 306},
  {91207, 307},
  {1159, 308},
  {23961, 309},
  {90566, 310},
  {86325, 311},
  {48058, 312},
  {14131, 313},
  {88994, 314},
  {57139, 315},
  {61987, 316},
  {46500, 317},
  {18069, 318},
  {33063, 319},
  {70946, 320},
  {68881, 321},
  {41800, 322},
  {83068, 323},
  {83009, 324},
  {73085, 325},
  {78186, 326},
  {4609, 327},
  {16366, 328},
  {58920, 329},
  {65115, 330},
  {78465, 331},
  {99429, 332},
  {8401, 333},
  {38059, 334},
  {84830, 335},
  {18159, 336},
  {93084, 337},
  {80307, 338},
  {71590, 339},
  {82649, 340},
  {95665, 341},
  {45044, 342},
  {62572, 343},
  {35212, 344},
  {15847, 345},
  {93501, 346},
  {60016, 347},
  {52102, 348},
  {13739, 349},
  {76130, 350},
  {90740, 351},
  {25583, 352},
  {87191, 353},
  {34482, 354},
  {72529, 355},
  {37295, 356},
  {72965, 357},
  {48480, 358},
  {9460, 359},
  {82878, 360},
  {83074, 361},
  {75058, 362},
  {59419, 363},
  {3467, 364},
  {34973, 365},
  {35800, 366},
  {31195, 367},
  {21277, 368},
  {11134, 369},
  {96478, 370},
  {7828, 371},
  {13660, 372},
  {11537, 373},
  {61204, 374},
  {56791, 375},
  {895, 376},
  {3287, 377},
  {2706, 378},
  {6365, 379},
  {30866, 380},
  {90604, 381},
  {42116, 382},
  {79511, 383},
  {14949, 384},
  {21527, 385},
  {88400, 386},
  {92339, 387},
  {66545, 388},
  {41915, 389},
  {83337, 390},
  {1915, 391},
  {1341, 392},
  {7134, 393},
  {13892, 394},
  {34465, 395},
  {51987, 396},
  {80067, 397},
  {81990, 398},
  {4415, 399},
  {21615, 400},
  {92213, 401},
  {37813, 402},
  {48983, 403},
  {53304, 404},
  {3658, 405},
  {39682, 406},
  {40447, 407},
  {84781, 408},
  {25631, 409},
  {78388, 410},
  {2433, 411},
  {66656, 412},
  {28576, 413},
  {84035, 414},
  {74309, 415},
  {61814, 416},
  {14656, 417},
  {16363, 418},
  {40285, 419},
  {989, 420},
  {37897, 421},
  {25301, 422},
  {77407, 423},
  {3659, 424},
  {1766, 425},
  {13730, 426},
  {3320, 427},
  {27447, 428},
  {51463, 429},
  {90693, 430},
  {2105, 431},
  {46468, 432},
  {88286, 433},
  {63022, 434},
  {18386, 435},
  {31181, 436},
  {71075, 437},
  {62016, 438},
  {94583, 439},
  {52909, 440},
  {23284, 441},
  {85824, 442},
  {62420, 443},
  {8335, 444},
  {4396, 445},
  {33032, 446},
  {24320, 447},
  {35259, 448},
  {49184, 449},
  {20490, 450},
  {97832, 451},
  {49249, 452},
  {5922, 453},
  {8685, 454},
  {72842, 455},
  {51662, 456},
  {32543, 457},
  {24674, 458},
  {38449, 459},
  {31643, 460},
  {8607, 461},
  {47368, 462},
  {82105, 463},
  {66298, 464},
  {92469, 465},
  {57567, 466},
  {73595, 467},
  {40111, 468},
  {77012, 469},
  {35211, 470},
  {7232, 471},
  {37109, 472},
  {92915, 473},
  {90247, 474},
  {60736, 475},
  {66649, 476},
  {3032, 477},
  {67873, 478},
  {63871, 479},
  {41188, 480},
  {29354, 481},
  {44804, 482},
  {25981, 483},
  {20214, 484},
  {13466, 485},
  {27347, 486},
  {14771, 487},
  {3915, 488},
  {955, 489},
  {19206, 490},
  {722, 491},
  {1367, 492},
  {33290, 493},
  {85211, 494},
  {147, 495},
  {71967, 496},
  {54927, 497},
  {59712, 498},
  {48341, 499}
};

int firstNameIndeces[99998]; // (*!*) Assign translation indeces
map<int, int> firstNameTranslator = {
  {36091, 0},
  {17213, 1},
  {17670, 2},
  {41565, 3},
  {39364, 4},
  {32429, 5},
  {88169, 6},
  {94695, 7},
  {71273, 8},
  {5292, 9},
  {56639, 10},
  {49742, 11},
  {50514, 12},
  {62980, 13},
  {19959, 14},
  {60946, 15},
  {22687, 16},
  {16885, 17},
  {78986, 18},
  {93957, 19},
  {54492, 20},
  {5099, 21},
  {94620, 22},
  {64721, 23},
  {52094, 24},
  {19544, 25},
  {58165, 26},
  {7473, 27},
  {7749, 28},
  {5498, 29},
  {80439, 30},
  {1368, 31},
  {23355, 32},
  {25905, 33},
  {43680, 34},
  {599, 35},
  {763, 36},
  {932, 37},
  {10600, 38},
  {38996, 39},
  {34874, 40},
  {36598, 41},
  {14291, 42},
  {93041, 43},
  {6599, 44},
  {1923, 45},
  {30041, 46},
  {50377, 47},
  {93146, 48},
  {12076, 49},
  {2817, 50},
  {54560, 51},
  {33101, 52},
  {81270, 53},
  {93073, 54},
  {15377, 55},
  {20698, 56},
  {44621, 57},
  {50365, 58},
  {90671, 59},
  {83495, 60},
  {84915, 61},
  {42745, 62},
  {50650, 63},
  {63966, 64},
  {12530, 65},
  {37837, 66},
  {1552, 67},
  {5464, 68},
  {80102, 69},
  {43042, 70},
  {96781, 71},
  {56092, 72},
  {71519, 73},
  {49020, 74},
  {62279, 75},
  {99898, 76},
  {87529, 77},
  {79828, 78},
  {60600, 79},
  {35903, 80},
  {86416, 81},
  {47998, 82},
  {89416, 83},
  {82668, 84},
  {47941, 85},
  {59455, 86},
  {58386, 87},
  {20124, 88},
  {66820, 89},
  {35261, 90},
  {77874, 91},
  {45851, 92},
  {35802, 93},
  {76348, 94},
  {50228, 95},
  {23877, 96},
  {59376, 97},
  {80263, 98},
  {33821, 99},
  {45754, 100},
  {40829, 101},
  {61039, 102},
  {51226, 103},
  {28548, 104},
  {21109, 105},
  {7110, 106},
  {93338, 107},
  {6614, 108},
  {79491, 109},
  {93114, 110},
  {7564, 111},
  {304, 112},
  {29423, 113},
  {26634, 114},
  {96714, 115},
  {40038, 116},
  {16158, 117},
  {88706, 118},
  {85780, 119},
  {26479, 120},
  {23360, 121},
  {42838, 122},
  {924, 123},
  {1584, 124},
  {78209, 125},
  {569, 126},
  {45027, 127},
  {2279, 128},
  {15499, 129},
  {53594, 130},
  {93542, 131},
  {2157, 132},
  {45462, 133},
  {70870, 134},
  {29288, 135},
  {27601, 136},
  {48384, 137},
  {46111, 138},
  {65386, 139},
  {98480, 140},
  {33266, 141},
  {39651, 142},
  {97660, 143},
  {76182, 144},
  {12430, 145},
  {44897, 146},
  {82268, 147},
  {39978, 148},
  {50233, 149},
  {16499, 150},
  {76576, 151},
  {116, 152},
  {86003, 153},
  {95395, 154},
  {94432, 155},
  {12968, 156},
  {87925, 157},
  {89449, 158},
  {1949, 159},
  {55756, 160},
  {3121, 161},
  {57294, 162},
  {95175, 163},
  {85260, 164},
  {62929, 165},
  {53639, 166},
  {9553, 167},
  {22145, 168},
  {11862, 169},
  {6728, 170},
  {1928, 171},
  {74556, 172},
  {44267, 173},
  {2379, 174},
  {35100, 175},
  {92472, 176},
  {1559, 177},
  {54268, 178},
  {17032, 179},
  {94889, 180},
  {97220, 181},
  {8652, 182},
  {8036, 183},
  {15541, 184},
  {16967, 185},
  {79296, 186},
  {148, 187},
  {4538, 188},
  {25221, 189},
  {30328, 190},
  {22801, 191},
  {71388, 192},
  {65528, 193},
  {4465, 194},
  {969, 195},
  {96732, 196},
  {22171, 197},
  {41929, 198},
  {63979, 199},
  {42239, 200},
  {40901, 201},
  {11534, 202},
  {51298, 203},
  {36158, 204},
  {4474, 205},
  {21356, 206},
  {92108, 207},
  {41820, 208},
  {73682, 209},
  {64560, 210},
  {51194, 211},
  {32779, 212},
  {88189, 213},
  {17825, 214},
  {3076, 215},
  {5879, 216},
  {98636, 217},
  {55445, 218},
  {2386, 219},
  {1472, 220},
  {66535, 221},
  {68461, 222},
  {7869, 223},
  {3001, 224},
  {69481, 225},
  {2821, 226},
  {87367, 227},
  {57103, 228},
  {1441, 229},
  {66123, 230},
  {65301, 231},
  {14675, 232},
  {69376, 233},
  {49897, 234},
  {78722, 235},
  {85798, 236},
  {40937, 237},
  {62545, 238},
  {8892, 239},
  {1391, 240},
  {84212, 241},
  {53004, 242},
  {3038, 243},
  {38299, 244},
  {26572, 245},
  {67013, 246},
  {89106, 247},
  {64238, 248},
  {22466, 249},
  {9552, 250},
  {73881, 251},
  {80782, 252},
  {13125, 253},
  {88466, 254},
  {28619, 255},
  {4115, 256},
  {883, 257},
  {62153, 258},
  {30897, 259},
  {98842, 260},
  {24827, 261},
  {16898, 262},
  {1674, 263},
  {51137, 264},
  {39300, 265},
  {61201, 266},
  {24553, 267},
  {22550, 268},
  {38002, 269},
  {41190, 270},
  {56555, 271},
  {23097, 272},
  {48082, 273},
  {86517, 274},
  {76373, 275},
  {34948, 276},
  {3745, 277},
  {18258, 278},
  {6521, 279},
  {79846, 280},
  {87292, 281},
  {2605, 282},
  {90264, 283},
  {21627, 284},
  {18481, 285},
  {92033, 286},
  {97447, 287},
  {99534, 288},
  {98873, 289},
  {39922, 290},
  {54749, 291},
  {79672, 292},
  {43411, 293},
  {23727, 294},
  {59346, 295},
  {87425, 296},
  {750, 297},
  {96643, 298},
  {1145, 299},
  {1285, 300},
  {17175, 301},
  {45254, 302},
  {54322, 303},
  {41532, 304},
  {31406, 305},
  {84061, 306},
  {90233, 307},
  {54660, 308},
  {63039, 309},
  {95154, 310},
  {621, 311},
  {11430, 312},
  {59324, 313},
  {26173, 314},
  {20728, 315},
  {2281, 316},
  {81256, 317},
  {34950, 318},
  {7266, 319},
  {1873, 320},
  {19694, 321},
  {45998, 322},
  {1979, 323},
  {53500, 324},
  {13188, 325},
  {84941, 326},
  {29479, 327},
  {75956, 328},
  {3563, 329},
  {29071, 330},
  {8968, 331},
  {86898, 332},
  {7611, 333},
  {7697, 334},
  {49343, 335},
  {18207, 336},
  {5111, 337},
  {24307, 338},
  {5720, 339},
  {59283, 340},
  {6823, 341},
  {10343, 342},
  {72041, 343},
  {44923, 344},
  {10868, 345},
  {39811, 346},
  {91618, 347},
  {75997, 348},
  {3494, 349},
  {5287, 350},
  {39534, 351},
  {6729, 352},
  {76659, 353},
  {6112, 354},
  {41397, 355},
  {12834, 356},
  {61984, 357},
  {31239, 358},
  {3136, 359},
  {49710, 360},
  {79022, 361},
  {95684, 362},
  {8341, 363},
  {71618, 364},
  {16830, 365},
  {36728, 366},
  {1035, 367},
  {89763, 368},
  {30846, 369},
  {39537, 370},
  {76091, 371},
  {2285, 372},
  {32925, 373},
  {367, 374},
  {2727, 375},
  {55715, 376},
  {3043, 377},
  {82295, 378},
  {71686, 379},
  {56111, 380},
  {52467, 381},
  {68469, 382},
  {14352, 383},
  {26916, 384},
  {85670, 385},
  {66329, 386},
  {30886, 387},
  {18327, 388},
  {7500, 389},
  {64501, 390},
  {2400, 391},
  {96128, 392},
  {5768, 393},
  {5261, 394},
  {41930, 395},
  {17893, 396},
  {74133, 397},
  {57104, 398},
  {27816, 399},
  {87193, 400},
  {61256, 401},
  {92133, 402},
  {45048, 403},
  {26049, 404},
  {81987, 405},
  {93773, 406},
  {85651, 407},
  {77140, 408},
  {54165, 409},
  {57402, 410},
  {83952, 411},
  {82970, 412},
  {68526, 413},
  {555, 414},
  {45238, 415},
  {67598, 416},
  {36754, 417},
  {15875, 418},
  {94246, 419},
  {20012, 420},
  {11931, 421},
  {56791, 422},
  {95402, 423},
  {2745, 424},
  {66545, 425},
  {83281, 426},
  {1915, 427},
  {54448, 428},
  {41910, 429},
  {51991, 430},
  {55969, 431},
  {43394, 432},
  {66030, 433},
  {29999, 434},
  {4987, 435},
  {76154, 436},
  {87261, 437},
  {23282, 438},
  {45957, 439},
  {61278, 440},
  {40193, 441},
  {50031, 442},
  {17535, 443},
  {41436, 444},
  {24621, 445},
  {95731, 446},
  {62039, 447},
  {47220, 448},
  {17145, 449},
  {15539, 450},
  {66417, 451},
  {10537, 452},
  {7941, 453},
  {4908, 454},
  {4296, 455},
  {2872, 456},
  {22479, 457},
  {93305, 458},
  {77973, 459},
  {85213, 460},
  {84261, 461},
  {57011, 462},
  {24522, 463},
  {84168, 464},
  {35457, 465},
  {51536, 466},
  {58462, 467},
  {68121, 468},
  {82445, 469},
  {5674, 470},
  {2030, 471},
  {33398, 472},
  {96340, 473},
  {27015, 474},
  {17193, 475},
  {32454, 476},
  {23813, 477},
  {65802, 478},
  {67495, 479},
  {23276, 480},
  {43771, 481},
  {98709, 482},
  {85613, 483},
  {68333, 484},
  {17666, 485},
  {84193, 486},
  {50030, 487},
  {37752, 488},
  {3397, 489},
  {63836, 490},
  {1920, 491},
  {527, 492},
  {7757, 493}
};

// Correctly initialize relevant indeces of the translation arrays
int setup1() {
  for (auto m : lastNameTranslator) {
    lastNameIndeces[m.first] = m.second;
  }
  return 1;
}
int setup2() {
  for (auto m : firstNameTranslator) {
    firstNameIndeces[m.first] = m.second;
  }
  return 1;
}

// Force code in setup1 and setup2 to run before main()
int runSetup1 = setup1();
int runSetup2 = setup2();


int size;
int x;
int value;

int hashLast(string name) { // Unique for last names, not first

  size = static_cast<int>(name.size());
  x;
  value = 0;

  for (int c=0; c<size; c++) {
    x = int(name[c]) - 78;
    value = (value + (((value/10)*(value/10))+1)+(((x*size)+1)*((x*c)+1)+1)) % 100000; // works for lastName
  }
  return value;
}

int hashFirst(string name) { // Unique for first names

  size = static_cast<int>(name.size());
  x;
  value = 0;

  for (int c=0; c<size; c++) {
    x = int(name[c]) - 78;
    value = (value + (((value/10)*(value/10))+1)+(((x*size)+1)*((x*c)+1)+1)) % 99998; // works for firstName
  }
  return value;
}


// list<Data *> sortedByName[500][494];
list<Data *> sortedByName[500][494];
// string name;
string last;
string first;
int lastIndex;
int firstIndex;

void sortByName(list<Data *> &l) {
  // clock_t temp1 = clock();
  for (auto i : l) {
    last = i->lastName;
    first = i->firstName;
    lastIndex = lastNameIndeces[hashLast(last)];
    firstIndex = firstNameIndeces[hashFirst(first)];
    sortedByName[lastIndex][firstIndex].push_back(i);
    // Replace above line with splice equivalent to avoid dynamically allocating memory
  }
  // clock_t temp2 = clock();
  // cout << "Time to hash: " << ((double)(temp2 - temp1)/CLOCKS_PER_SEC) << endl;

  l.clear();

  for (int p1=0; p1<500; p1++) {
    for (int p2=0; p2<494; p2++) {
      sortedByName[p1][p2].sort(ssnCompare1);
      l.splice(l.end(), sortedByName[p1][p2]);
    }
  }
}


// --------------- T3 Section -------------
list<Data *> subList;
list<Data *>::iterator it1;
list<Data *>::iterator it2;

void sortSublist(
  list<Data *> &l,
  list<Data *>::iterator it1,
  list<Data *>::iterator it2) {

  subList.splice(subList.begin(), l, it1, it2);
  subList.sort(ssnCompare1);
  l.splice(it2, subList);
}


void sortT3(list<Data *> &l) {
  it1 = l.begin();
  it2 = l.begin();

  while (it2 != l.end()) {
    if ((*it2)->firstName != (*it1)->firstName) {
      sortSublist(l, it1, it2);
      it1 = it2;
    }
    it2++;
  }
  sortSublist(l, it1, it2);
}

// --------------- T4 Section --------------------
string ssnA;
string ssnB;
int ii;
bool ssnCompare4(Data *A, Data *B) {
  ssnA = A->ssn;
  ssnB = B->ssn;
  for (ii=7; ii<11; ii++) {
    if  (ssnA[ii]!=ssnB[ii]) {
      return ssnA[ii] < ssnB[ii];
    }
  }
}

string ssn;
int binIndex;
list<Data *> bins1[10000];
list<Data *> bins2[100000];

void radixSort(list<Data *> &l) {
  for (auto i : l) {
    ssn = i->ssn;
    binIndex = int(ssn[7]-48)*1000 + int(ssn[8]-48)*100 + int(ssn[9]-48)*10 + int(ssn[10]-48);
    bins1[binIndex].push_back(i);
  }
  for (auto bin : bins1) {
    for (auto i : bin) {
      ssn = i->ssn;
      binIndex = int(ssn[0]-48)*10000 + int(ssn[1]-48)*1000 + int(ssn[2]-48)*100 + int(ssn[4]-48)*10 + int(ssn[5]-48);
      bins2[binIndex].push_back(i);
    }
  }
  l.clear();
  for (auto bin : bins2) {
    l.splice(l.end(), bin);
  }
}


string front;
string back;
void sortDataList(list<Data *> &l) {
  // Fill this in
  front = l.front()->lastName;
  back = l.back()->lastName;

  if (front[0]=='A' && back[0]=='Z') {
    // Assume T3
    sortT3(l);
  }

  else if (front==back) {
    // Assume T4
    radixSort(l);
  }

  else {
    // Assume T1 or T2
    sortByName(l);
  }
}
